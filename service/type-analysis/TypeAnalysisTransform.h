/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

#pragma once

#include "GlobalTypeAnalyzer.h"
#include "IRCode.h"
#include "LocalTypeAnalyzer.h"
#include "WholeProgramState.h"

namespace type_analyzer {

/**
 * Optimize the given code by:
 *   - removing dead nonnull assertions generated by Kotlin
 * (checkParameterIsNotNull/checkExpressionValueIsNotNull)
 */
class Transform final {
 public:
  struct Config {
    size_t max_global_analysis_iteration{0};
    bool remove_dead_null_check_insn{true};
    Config() {}
  };

  struct Stats {
    size_t null_check_insn_removed{0};

    Stats& operator+=(const Stats& that) {
      null_check_insn_removed += that.null_check_insn_removed;
      return *this;
    }
  };

  explicit Transform(Config config = Config()) : m_config(config) {}

  Stats apply(const type_analyzer::local::LocalTypeAnalyzer& lta, IRCode* code);

 private:
  /*
   * The methods in this class queue up their transformations. After they are
   * all done, the apply_changes() method does the actual modification of the
   * IRCode.
   */
  void apply_changes(IRCode*);

  const Config m_config;
  std::vector<IRList::iterator> m_deletes;
  Stats m_stats;
};

} // namespace type_analyzer
